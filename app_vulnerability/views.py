# from django.shortcuts import render
# from django.http import JsonResponse
# import joblib
# import numpy as np

# def predict_severity(request):
#     if request.method == 'POST':
#         cvss_score = float(request.POST['cvss_score'])
#         model = joblib.load('app_vulnerability/machine_learning/rf_model.pkl')  # Load the trained Random Forest model
#         prediction = model.predict(np.array([[cvss_score]]))
#         severity_mapping = {0: 'LOW', 1: 'MEDIUM', 2: 'HIGH', 3: 'CRITICAL'}
#         predicted_severity = severity_mapping[prediction[0]]
#         return JsonResponse({'predicted_severity': predicted_severity})
#     return render(request, 'app_vulnerability/predict.html')

# vulnerabilities/views.py
from urllib import request
from django.shortcuts import render
from .models import Vulnerability
from django.http import JsonResponse
import joblib  # Untuk memuat model Random Forest
import pandas as pd
import socket
import requests
import nmap

def penetration_test(request):
    if request.method == 'POST':
        url = request.POST.get('url')
        
        # Load model yang telah dilatih
        model = joblib.load('app_vulnerability/machine_learning/rf_model.pkl')

        # Siapkan data untuk prediksi
        data = pd.DataFrame({
            # 'url': [url],
            'cvss_score': [7.5],  # Sesuaikan fitur model Anda
            # tambahkan fitur lainnya yang diperlukan oleh model
        })

        # Prediksi hasil
        prediction = model.predict(data)
        
        # Ambil data kerentanan berdasarkan URL
        vulnerabilities = Vulnerability.objects.filter(url=url)


        # Siapkan data untuk ditampilkan
        output = {
            'url': url,
            'vulnerabilities': vulnerabilities,
            'predicted_score': prediction[0],  # Misalkan model memprediksi skor
        }
        
        return render(request, 'app_vulnerability/result.html', output)

    return render(request, 'app_vulnerability/pentest_form.html')


def cek_host_status(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return 'Host is up (200 ok)'
        else: 
            return f'Host is up, but returned status code {response.status_code}'
    except requests.ConnectionError:
        return 'Host is down or unreachable'

def get_ip_address(hostname):
    try:
        ip_address = socket.gethostbyname(hostname)
        return ip_address
    except socket.gaierror:
        return 'Unable to resolve IP address'

def get_hostname_from_ip(ip_address):
    try:
        hostname = socket.gethostbyaddr(ip_address)
        return hostname[0]  # Mengembalikan nama host
    except socket.herror:
        return 'Hostname could not be resolved'


def analyze_website(request):
    url = request.GET.get('url')  # Mendapatkan URL dari query parameter
    if not url:
        return JsonResponse({'error': 'Please provide a URL'})
    host_status = cek_host_status(url)
    hostname = url.split('//')[-1]  # Ambil hostname dari URL (misal 'example.com')
    ip_address = get_ip_address(hostname)
    resolved_hostname = get_hostname_from_ip(ip_address)
    # Mengembalikan hasil analisis dalam bentuk JSON
    return JsonResponse({
        'host_status': host_status,
        'ip_address': ip_address,
        'resolved_hostname': resolved_hostname
    })